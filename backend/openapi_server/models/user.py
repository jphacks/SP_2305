# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uuid=None, id=None, nickname=None):  # noqa: E501
        """User - a model defined in OpenAPI

        :param uuid: The uuid of this User.  # noqa: E501
        :type uuid: str
        :param id: The id of this User.  # noqa: E501
        :type id: str
        :param nickname: The nickname of this User.  # noqa: E501
        :type nickname: str
        """
        self.openapi_types = {
            'uuid': str,
            'id': str,
            'nickname': str
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'id': 'id',
            'nickname': 'nickname'
        }

        self._uuid = uuid
        self._id = id
        self._nickname = nickname

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self):
        """Gets the uuid of this User.


        :return: The uuid of this User.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this User.


        :param uuid: The uuid of this User.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def id(self):
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: str
        """

        self._id = id

    @property
    def nickname(self):
        """Gets the nickname of this User.


        :return: The nickname of this User.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this User.


        :param nickname: The nickname of this User.
        :type nickname: str
        """

        self._nickname = nickname
